name: Restart kg-mcp-server Container

on:
  workflow_run:
    workflows: ["Build MCP Server Docker Image"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'main'
        type: string
      force_restart:
        description: 'Force container restart even if same image'
        required: false
        default: false
        type: boolean

env:
  CONTAINER_NAME: kg-mcp-server
  IMAGE_TAG: ${{ github.event.inputs.image_tag || 'main' }}
  IMAGE_REPO: ghcr.io/dasein108/llm-exo-graph
  GHCR_USER: dasein108

jobs:
  restart-on-success:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Restart Docker container over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            export CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            export IMAGE_REPO="${{ env.IMAGE_REPO }}"
            export IMAGE_TAG="${{ env.IMAGE_TAG }}"
            export NEO4J_URI="${{ secrets.NEO4J_URI }}"
            export NEO4J_USERNAME="${{ secrets.NEO4J_USERNAME }}"
            export NEO4J_PASSWORD="${{ secrets.NEO4J_PASSWORD }}"
            export NEO4J_DATABASE="${{ secrets.NEO4J_DATABASE }}"
            export LITELLM_BASE_URL="${{ secrets.LITELLM_BASE_URL }}"
            export LITELLM_BEARER_TOKEN="${{ secrets.LITELLM_BEARER_TOKEN }}"
            export LITELLM_MODEL="${{ secrets.LITELLM_MODEL }}"
            export GHCR_PAT="${{ secrets.GHCR_PAT }}"
            export GHCR_USER="${{ env.GHCR_USER }}"

            sudo su -c '
              echo "Logging into GitHub Container Registry..."
              echo "'$GHCR_PAT'" | docker login ghcr.io -u '$GHCR_USER' --password-stdin

              echo "Stopping existing container..."
              docker stop '$CONTAINER_NAME' || true

              echo "Removing existing container..."
              docker rm '$CONTAINER_NAME' || true

              echo "Removing old Docker image..."
              docker rmi '$IMAGE_REPO'/'$CONTAINER_NAME':'$IMAGE_TAG' || true

              echo "Pulling latest image..."
              docker pull '$IMAGE_REPO'/'$CONTAINER_NAME':'$IMAGE_TAG'

              echo "Starting new container..."
              docker run -d \
                --name '$CONTAINER_NAME' \
                --restart always \
                -p 3333:3000 \
                -e NEO4J_URI="'$NEO4J_URI'" \
                -e NEO4J_USERNAME="'$NEO4J_USERNAME'" \
                -e NEO4J_PASSWORD="'$NEO4J_PASSWORD'" \
                -e NEO4J_DATABASE="'$NEO4J_DATABASE'" \
                -e LITELLM_BASE_URL="'$LITELLM_BASE_URL'" \
                -e LITELLM_BEARER_TOKEN="'$LITELLM_BEARER_TOKEN'" \
                -e LITELLM_MODEL="'$LITELLM_MODEL'" \
                -e LOG_LEVEL="INFO" \
                '$IMAGE_REPO'/'$CONTAINER_NAME':'$IMAGE_TAG'
            '
